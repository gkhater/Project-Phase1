<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome</title>
    <link rel="stylesheet" href="/styles.css">
    <script>
        let exchangeRates = { USD: 1, EUR: 1, GBP: 1 };
        let selectedCurrency = 'USD';

        // Fetch the exchange rates when the page loads
        window.onload = function() {
            updateExchangeRates();
            fetchAndPopulateProducts(); // Populate the product table
        };

        // Update exchange rates using the API
        function updateExchangeRates() {
            fetch('https://api.frankfurter.app/latest?from=USD&to=EUR,GBP')
                .then(response => response.json())
                .then(data => {
                    exchangeRates.EUR = data.rates.EUR;
                    exchangeRates.GBP = data.rates.GBP;
                    updatePrices();
                });
        }

        // Update item prices and total price based on the selected currency
        function updatePrices() {
            const priceCells = document.querySelectorAll('.price-cell');
            priceCells.forEach(cell => {
                const priceUSD = parseFloat(cell.dataset.priceUsd);
                cell.textContent = (priceUSD * exchangeRates[selectedCurrency]).toFixed(2) + ' ' + selectedCurrency;
            });
            updateTotal();
        }

        // Update the total price based on selected items
        function updateTotal() {
            let total = 0;
            const checkboxes = document.querySelectorAll('input[name="selectedProducts"]:checked');
            checkboxes.forEach(checkbox => {
                const priceUSD = parseFloat(checkbox.dataset.priceUsd);
                total += priceUSD * exchangeRates[selectedCurrency];
            });
            document.getElementById('totalPrice').textContent = `${total.toFixed(2)} ${selectedCurrency}`;
        }

        // Handle currency change
        function handleCurrencyChange(event) {
            selectedCurrency = event.target.value;
            updatePrices();
        }

        // Fetch and populate products dynamically from the server
        async function fetchAndPopulateProducts() {
            try {
                const response = await fetch('/products');
                const products = await response.json();
                const tableBody = document.querySelector('table tbody');
                tableBody.innerHTML = ''; // Clear existing rows

                for (let productID in products) {
                    const product = products[productID];
                    const cleanBase64 = product.Image && product.Image !== '""' ? product.Image.replace(/\s+/g, '').replace(/"/g, '').trim() : '';
                    const imageSource = cleanBase64 ? `data:image/png;base64,${cleanBase64}` : '';

                    // console.log('Image Source:', imageSource);

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td style="display:none;">${productID}</td>
                        <td>${product.Name}</td>
                        <td>${product.Seller}</td>
                        <td>${product.Count}</td>
                        <td>${product.Rating} / 5</td>
                        <td>${product.Reviews} Reviews</td>
                        <td class="price-cell" data-price-usd="${product.Price}">${product.Price} USD</td>
                        <td>${product.Description}</td>
                        <td><img src="${imageSource}" alt="${product.Name}" style="max-width: 100px;"></td>
                        <td><input type="checkbox" name="selectedProducts" value="${productID}" data-price-usd="${product.Price}" onchange="updateTotal()"></td>
                    `;
                    tableBody.appendChild(row);
                }
                updatePrices(); // Update prices after population
            } catch (error) {
                console.error('Error fetching products:', error);
            }
        }
    </script>
</head>
<body>
    <div class="welcome-container">
        <h2>Welcome, <%= username %>!</h2>

        <!-- Logout button -->
        <form action="/logout" method="POST">
            <button type="submit">Logout</button>
        </form>

        <!-- Currency selection dropdown -->
        <label for="currencySelect">Select Currency:</label>
        <select id="currencySelect" onchange="handleCurrencyChange(event)">
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
            <option value="GBP">GBP</option>
        </select>

        <h3>Items:</h3>
        <form action="/purchase" method="POST">
            <table>
                <thead>
                    <tr>
                        <th style="display:none;">Product ID</th>
                        <th>Item Name</th>
                        <th>Seller</th>
                        <th>Available Items</th>
                        <th>Rating</th>
                        <th>Reviews</th>
                        <th>Price</th>
                        <th>Description</th>
                        <th>Image</th>
                        <th>Buy</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Table rows will be dynamically populated here -->
                </tbody>
            </table>
            <p>Total Price: <span id="totalPrice">0.00 USD</span></p>
            <div class="buttons-container">
                <button type="submit">Purchase Selected Items</button>
                <button type="button" id="addItemBtn">Add Item</button>
            </div>
        </form>
    </div>

    <!-- Add Item Modal -->
    <div id="addItemModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Add New Item</h2>
            <form id="addItemForm">
                <label for="name">Name:</label><br>
                <input type="text" id="name" name="name" required><br>
                <label for="qty">Quantity:</label><br>
                <input type="number" id="qty" name="qty" required><br>
                <label for="price">Price (USD):</label><br>
                <input type="number" id="price" name="price" step="0.01" required><br>
                <label for="description">Description:</label><br>
                <textarea id="description" name="description" required></textarea><br><br>
                <label for="image">Upload Image:</label><br>
                <input type="file" id="image" name="image" accept="image/*"><br><br>
                <button type="button" id="submitBtn">Add Item</button>
            </form>
        </div>
    </div>
</body>
</html>

<style>
  .modal {
    display: none;
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
  }
  .modal-content {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    text-align: left;
    width: 300px;
  }
  .close {
    float: right;
    cursor: pointer;
  }
</style>

<script>
    // Modal functionality
    const addItemBtn = document.getElementById("addItemBtn");
    const addItemModal = document.getElementById("addItemModal");
    const closeModal = document.getElementsByClassName("close")[0];

    addItemBtn.onclick = function() {
        addItemModal.style.display = "flex";
    };

    closeModal.onclick = function() {
        addItemModal.style.display = "none";
    };

    window.onclick = function(event) {
        if (event.target == addItemModal) {
            addItemModal.style.display = "none";
        }
    };

    document.getElementById("submitBtn").onclick = async function () {
        const name = document.getElementById("name").value;
        const qty = document.getElementById("qty").value;
        const price = document.getElementById("price").value;
        const description = document.getElementById("description").value;
        const imageInput = document.getElementById('image').files[0]; // Get the uploaded image

        let imageBase64 = ''; // Initialize the Base64 variable

        if (imageInput) {
            // Convert the image to Base64
            imageBase64 = await toBase64(imageInput);
            cleanBase64 = imageBase64 && imageBase64 !== '""' ? imageBase64.replace(/\s+/g, '').replace(/"/g, '').trim() : '';
        }

        fetch('/add-item', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, qty, price, description, image: cleanBase64 }),
        })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                addItemModal.style.display = "none"; // Close modal
                fetchAndPopulateProducts(); // Refresh the product table
            })
            .catch(error => console.error('Error:', error));
    };

    // Helper function to convert a file to Base64
    function toBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result.split(',')[1]); // Exclude the Base64 prefix
            reader.onerror = (error) => reject(error);
            reader.readAsDataURL(file);
        });
    }

</script>
