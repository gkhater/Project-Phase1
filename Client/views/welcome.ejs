<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome</title>
    <link rel="stylesheet" href="/styles.css">
    <script>
        let exchangeRates = { USD: 1, EUR: 1, GBP: 1 };
        let selectedCurrency = 'USD';

        // Fetch the exchange rates when the page loads
        window.onload = function() {
            updateExchangeRates();
            fetchAndPopulateProducts(); // Populate the product table
        };

        // Update exchange rates using the API
        function updateExchangeRates() {
            fetch('https://api.frankfurter.app/latest?from=USD&to=EUR,GBP')
                .then(response => response.json())
                .then(data => {
                    exchangeRates.EUR = data.rates.EUR;
                    exchangeRates.GBP = data.rates.GBP;
                    updatePrices();
                });
        }

        // Update item prices and total price based on the selected currency
        function updatePrices() {
            const priceCells = document.querySelectorAll('.price-cell');
            priceCells.forEach(cell => {
                const priceUSD = parseFloat(cell.dataset.priceUsd);
                cell.textContent = (priceUSD * exchangeRates[selectedCurrency]).toFixed(2) + ' ' + selectedCurrency;
            });
            updateTotal();
            updateBalance(); // Update balance whenever prices are updated
        }

        // Update the total price based on selected items
        function updateTotal() {
            let total = 0;
            const checkboxes = document.querySelectorAll('input[name="selectedProducts"]:checked');
            checkboxes.forEach(checkbox => {
                const priceUSD = parseFloat(checkbox.dataset.priceUsd);
                total += priceUSD * exchangeRates[selectedCurrency];
            });
            document.getElementById('totalPrice').textContent = `${total.toFixed(2)} ${selectedCurrency}`;
        }

        // Handle currency change
        function handleCurrencyChange(event) {
            selectedCurrency = event.target.value;
            updatePrices();
        }

        async function updateBalance() {
            try {
                const response = await fetch('/balance');
                const data = await response.json();
                const convertedBalance = (parseFloat(data.balance) * exchangeRates[selectedCurrency]).toFixed(2);
                document.getElementById('balance-display').textContent = `Balance: ${convertedBalance} ${selectedCurrency}`;
            } catch (error) {
                console.error('Error fetching balance:', error);
            }
        }

    
        async function fetchAndPopulateProducts() {
            try {
                const response = await fetch('/products');
                const { data: products, balance } = await response.json();

                // Update balance display
                document.getElementById('balance-display').textContent = `Balance: ${balance}`;

                const tableBody = document.querySelector('table tbody');
                tableBody.innerHTML = ''; // Clear existing rows

                for (let productID in products) {
                    const product = products[productID];
                    const cleanBase64 = product.Image && product.Image !== '""' ? product.Image.replace(/\s+/g, '').replace(/"/g, '').trim() : '';
                    const imageSource = cleanBase64 ? `data:image/png;base64,${cleanBase64}` : '';

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td style="display:none;">${productID}</td>
                        <td>${product.Name}</td>
                        <td>${product.Seller}</td>
                        <td>${product.Count}</td>
                        <td>${product.Rating} / 5</td>
                        <td>${product.Reviews} Reviews</td>
                        <td class="price-cell" data-price-usd="${product.Price}">${product.Price} USD</td>
                        <td>${product.Description}</td>
                        <td><img src="${imageSource}" alt="${product.Name}" style="max-width: 100px;"></td>
                        <td><input type="checkbox" name="selectedProducts" value="${productID}" data-price-usd="${product.Price}" onchange="updateTotal()"></td>
                    `;
                    tableBody.appendChild(row);
                }
                updatePrices(); // Update prices after population
            } catch (error) {
                console.error('Error fetching products:', error);
            }
        }

        // Handle deposit form submission asynchronously
        document.addEventListener('DOMContentLoaded', () => {
            const depositModal = document.getElementById('depositModal');
            const depositForm = document.getElementById('depositForm');
            const openDepositModal = document.getElementById('openDepositModal');
            const closeDepositModal = document.getElementById('closeDepositModal');

            openDepositModal.onclick = function() {
                depositModal.style.display = "flex";
            };

            closeDepositModal.onclick = function() {
                depositModal.style.display = "none";
            };

            window.onclick = function(event) {
                if (event.target == depositModal) {
                    depositModal.style.display = "none";
                }
            };

            depositForm.onsubmit = async function(event) {
                event.preventDefault();
                const amount = document.getElementById('amount').value;

                try {
                    const response = await fetch('/deposit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ amount })
                    });
                    const result = await response.json();
                    alert(result.message);
                    depositModal.style.display = "none";
                    fetchAndPopulateProducts();
                } catch (error) {
                    console.error('Error processing deposit:', error);
                }
            };

            const addItemBtn = document.getElementById('addItemBtn');
            const addItemModal = document.getElementById('addItemModal');
            const closeAddItemModal = document.getElementById('closeAddItemModal');
            const addItemForm = document.getElementById('addItemForm');

            addItemBtn.onclick = function() {
                addItemModal.style.display = "flex";
            };

            closeAddItemModal.onclick = function() {
                addItemModal.style.display = "none";
            };

            window.onclick = function(event) {
                if (event.target == addItemModal) {
                    addItemModal.style.display = "none";
                }
            };

            addItemForm.onsubmit = async function(event) {
                event.preventDefault();
                const name = document.getElementById('name').value;
                const qty = document.getElementById('qty').value;
                const price = document.getElementById('price').value;
                const description = document.getElementById('description').value;
                const imageInput = document.getElementById('image').files[0];

                let imageBase64 = '';
                if (imageInput) {
                    imageBase64 = await toBase64(imageInput);
                    imageBase64 = imageBase64.replace(/\s+/g, '').replace(/"/g, '').trim();
                }

                try {
                    const response = await fetch('/add-item', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name, qty, price, description, image: imageBase64 }),
                    });
                    const result = await response.json();
                    alert(result.message);
                    addItemModal.style.display = "none";
                    fetchAndPopulateProducts();
                } catch (error) {
                    console.error('Error:', error);
                }
            };

            const purchaseButton = document.querySelector('.purchase-button');
            purchaseButton.onclick = async function(event) {
                event.preventDefault();
                const selectedProducts = Array.from(document.querySelectorAll('input[name="selectedProducts"]:checked')).map(el => el.value);
                try {
                    const response = await fetch('/purchase', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ selectedProducts })
                    });
                    const result = await response.json();
                    alert(result.message);

                    addItemModal.style.display = "none";
                    fetchAndPopulateProducts();

                    // Show rating modal after purchase
                    if (selectedProducts.length > 0 && result.success == true) {
                        const ratingModal = document.getElementById('ratingModal');
                        const ratingForm = document.getElementById('ratingForm');
                        const closeRatingModal = document.getElementById('closeRatingModal');

                        ratingModal.style.display = 'flex';

                        closeRatingModal.onclick = () => {
                            ratingModal.style.display = 'none';
                        };

                        window.onclick = (event) => {
                            if (event.target === ratingModal) {
                                ratingModal.style.display = 'none';
                            }
                        };

                        ratingForm.onsubmit = async function(event) {
                            event.preventDefault();
                            const rating = document.querySelector('input[name="rating"]:checked').value;
                        const productID = selectedProducts[0]; // Assuming single product rating; extend logic for multiple if needed.

                        try {
                            const response = await fetch('/rate', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ product_id: productID, rating: rating })
                            });

                            const result = await response.json();
                            if (result.success) {
                                alert(`You rated the product: ${rating} stars. Server acknowledged.`);
                            } else {
                                alert(`Failed to submit the rating: ${result.message}`);
                            }
                        } catch (error) {
                            console.error('Error submitting rating:', error);
                            alert('An error occurred while submitting your rating.');
                        } finally {
                            ratingModal.style.display = 'none';
                        }
                    };

                    }
                } catch (error) {
                    console.error('Error processing purchase:', error);
                }
            };
        });

        document.addEventListener('DOMContentLoaded', () => {
            const onlineUsersModal = document.getElementById('onlineUsersModal');
            const openOnlineUsersModal = document.getElementById('openOnlineUsersModal');
            const closeOnlineUsersModal = document.getElementById('closeOnlineUsersModal');
            const sendMessageButton = document.getElementById('sendMessageButton');
            const messageBox = document.getElementById('messageBox');

            // Open the modal
            openOnlineUsersModal.onclick = () => {
                onlineUsersModal.style.display = "flex";
                fetchOnlineUsers(); // Fetch and display online users
            };

            // Close the modal
            closeOnlineUsersModal.onclick = () => {
                onlineUsersModal.style.display = "none";
            };

            // Close modal when clicking outside
            window.onclick = (event) => {
                if (event.target === onlineUsersModal) {
                    onlineUsersModal.style.display = "none";
                }
            };

            // Fetch online users
            async function fetchOnlineUsers() {
                try {
                    const response = await fetch('/online');
                    const result = await response.json();
                    const onlineUsersList = document.getElementById('onlineUsersList');
                    onlineUsersList.innerHTML = ''; // Clear previous list

                    if (result.code === 200 && result.users) {
                        // Iterate over users and populate the list with radio buttons
                        Object.entries(result.users).forEach(([username, userInfo], index) => {
                            const listItem = document.createElement('li');
                            listItem.innerHTML = `
                            <label style="display: flex; align-items: center; gap: 8px; width: 100%;">
                                <input 
                                    type="radio" 
                                    name="selectedUser" 
                                    value="${username}" 
                                    data-ip="${userInfo.IP}" 
                                    data-port="${userInfo.Port}" 
                                    style="margin-right: 8px; width: 10%;">
                                <span>${username}</span>
                            </label>
                            `;
                            onlineUsersList.appendChild(listItem);
                        });
                    } else {
                        const listItem = document.createElement('li');
                        listItem.textContent = 'No users online.';
                        onlineUsersList.appendChild(listItem);
                    }
                } catch (error) {
                    console.error('Error fetching online users:', error);
                    alert('Failed to fetch online users.');
                }
            }

            // Placeholder action for the "Send Message" button
            sendMessageButton.onclick = () => {
                // Get the selected user's radio button
                const selectedRadio = document.querySelector('input[name="selectedUser"]:checked');
                const username = "<%= username %>: "; // Embed the EJS value as a JavaScript variable
                const message = username + messageBox.value;

                if (!selectedRadio) {
                    alert('Please select a user.');
                    return;
                }

                if (!message) {
                    alert('Please enter a message.');
                    return;
                }

                // Extract IP and port from the selected radio button's data attributes
                const ip = selectedRadio.getAttribute('data-ip');
                const port = selectedRadio.getAttribute('data-port');

                if (!ip || !port) {
                    alert('User information is incomplete.');
                    return;
                }

                // Send the message to the user's IP and port
                fetch(`http://${ip}:${port}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'text/plain', // Plain text to avoid JSON-related overhead
                    },
                    body: message, // Send the raw message directly
                })
                    .then((response) => {
                        if (response.ok) {
                            alert(`Message sent to ${selectedRadio.value}: "${message}"`);
                        } else {
                            alert(`Failed to send message to ${selectedRadio.value}.`);
                        }
                    })
                    .catch((error) => {
                        console.error('Error sending message:', error);
                        alert(`Error sending message to ${selectedRadio.value}.`);
                    });
            };

            // Handle Search Modal functionality
            const searchModal = document.getElementById('searchModal');
            const searchButton = document.querySelector('.search-button');
            const searchForm = document.getElementById('searchForm');

            searchButton.onclick = () => {
                searchModal.style.display = "flex";
            };

            searchForm.onsubmit = async function(event) {
                event.preventDefault();
                const query = document.getElementById('searchQuery').value.trim();

                if (!query) {
                    alert('Please enter a valid search term.');
                    return;
                }

                try {
                    const response = await fetch('/search', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ query })
                    });

                    const results = await response.json();
                    const table = searchModal.querySelector('table');
                    const tableBody = table.querySelector('tbody');

                    tableBody.innerHTML = ''; // Clear previous rows

                    // Check if products exist and iterate over the object
                    const products = results.products;
                    if (products && Object.keys(products).length > 0) {
                        Object.values(products).forEach(product => {
                            const cleanBase64 = product.Image && product.Image !== '""' ? product.Image.replace(/\s+/g, '').replace(/"/g, '').trim() : '';
                            const imageSource = cleanBase64 ? `data:image/png;base64,${cleanBase64}` : 'No Image';

                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${product.Name}</td>
                                <td>${product.Seller}</td>
                                <td>${product.Count}</td>
                                <td>${product.Rating} / 5</td>
                                <td>${product.Reviews} Reviews</td>
                                <td>${product.Price} USD</td>
                                <td>${product.Description}</td>
                                <td>${cleanBase64 ? `<img src="${imageSource}" alt="${product.Name}" style="max-width: 100px;">` : 'No Image'}</td>
                            `;
                            tableBody.appendChild(row);
                        });
                        table.style.display = "table";
                    } else {
                        alert('No products found matching your query.');
                        table.style.display = "none";
                    }
                } catch (error) {
                    console.error('Error during search:', error);
                    alert('An error occurred while searching.');
                }
            };

            window.onclick = function(event) {
                if (event.target === searchModal) {
                    searchModal.style.display = "none";
                }
            };
        });

        // Helper function to convert a file to Base64
        function toBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result.split(',')[1]);
                reader.onerror = (error) => reject(error);
                reader.readAsDataURL(file);
            });
        }

        // Connect to the WebSocket server
        const socket = new WebSocket('ws://localhost:8080');

        // Listen for messages from the server
        socket.onmessage = function(event) {
            alert(`Message received: ${event.data}`);
        };

        socket.onopen = function() {
            console.log('Connected to WebSocket server');
        };

        socket.onerror = function(error) {
            console.error('WebSocket error:', error);
        };

        socket.onclose = function() {
            console.log('WebSocket connection closed');
        };
    </script>
</head>
<body>
    <div class="welcome-container">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h2>Welcome, <%= username %>!</h2>
            <div style="background-color: #f9f9f9; padding: 10px 20px; border-radius: 10px; box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);">
                <span id="balance-display" style="font-size: 16px; font-weight: bold;">Balance: </span>
            </div>
        </div>

        <!-- Logout button -->
        <form action="/logout" method="POST" style="display: inline-block; margin-bottom: 20px;">
            <button type="submit" class="button logout-button">Logout</button>
        </form>

        <!-- Currency selection dropdown -->
        <div class="currency-container">
            <label for="currencySelect">Select Currency:</label>
            <select id="currencySelect" onchange="handleCurrencyChange(event)" class="currency-select">
                <option value="USD">USD</option>
                <option value="EUR">EUR</option>
                <option value="GBP">GBP</option>
            </select>
        </div>

        <!-- Items Table -->
        <h3>Items:</h3>
        <form>
            <table class="product-table">
                <thead>
                    <tr>
                        <th style="display:none;">Product ID</th>
                        <th>Item Name</th>
                        <th>Seller</th>
                        <th>Available Items</th>
                        <th>Rating</th>
                        <th>Reviews</th>
                        <th>Price</th>
                        <th>Description</th>
                        <th>Image</th>
                        <th>Buy</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Table rows will be dynamically populated here -->
                </tbody>
            </table>
            <p class="total-price">Total Price: <span id="totalPrice">0.00 USD</span></p>
            <div class="buttons-container">
                <button type="button" class="button purchase-button">Purchase Selected Items</button>
                <button type="button" id="addItemBtn" class="button add-item-button">Add Item</button>
                <button type="button" id="openDepositModal" class="button deposit-button">Deposit</button>
                <button type="button" id="openOnlineUsersModal" class="button online-users-button">View Online Users</button>
                <button type="button" class="button search-button">Search Product</button>
            </div>
        </form>

        <!-- Deposit Modal -->
        <div id="depositModal" class="modal">
            <div class="modal-content">
                <span id="closeDepositModal" class="close">&times;</span>
                <h2>Deposit Amount</h2>
                <form id="depositForm">
                    <label for="amount">Amount:</label><br>
                    <input type="number" id="amount" name="amount" required><br><br>
                    <button type="submit" class="button submit-button">Deposit</button>
                </form>
            </div>
        </div>

        <!-- Add Item Modal -->
        <div id="addItemModal" class="modal">
            <div class="modal-content">
                <span id="closeAddItemModal" class="close">&times;</span>
                <h2>Add New Item</h2>
                <form id="addItemForm">
                    <label for="name">Name:</label><br>
                    <input type="text" id="name" name="name" required><br>
                    <label for="qty">Quantity:</label><br>
                    <input type="number" id="qty" name="qty" required><br>
                    <label for="price">Price (USD):</label><br>
                    <input type="number" id="price" name="price" step="0.01" required><br>
                    <label for="description">Description:</label><br>
                    <textarea id="description" name="description" required></textarea><br><br>
                    <label for="image">Upload Image:</label><br>
                    <input type="file" id="image" name="image" accept="image/*"><br><br>
                    <button type="submit" class="button submit-button">Add Item</button>
                </form>
            </div>
        </div>

        <!-- Online Users Modal -->
        <div id="onlineUsersModal" class="modal">
            <div class="modal-content">
                <span id="closeOnlineUsersModal" class="close">&times;</span>
                <h2>Online Users</h2>
                <form id="onlineUsersForm">
                    <ul id="onlineUsersList" style="list-style-type: none; padding: 0;">
                        <!-- Online users with radio buttons will be dynamically populated here -->
                    </ul>
                    <div style="margin-top: 20px;">
                        <label for="messageBox">Message:</label>
                        <textarea id="messageBox" rows="3" style="width: 100%;"></textarea>
                    </div>
                    <button type="button" id="sendMessageButton" class="button" style="margin-top: 10px;">Send Message</button>
                </form>
            </div>
        </div>

        <!-- Search Modal -->
        <div id="searchModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="document.getElementById('searchModal').style.display='none'">&times;</span>
                <h2>Search Products</h2>
                <form id="searchForm">
                    <label for="searchQuery">Product Name or Description:</label>
                    <input type="text" id="searchQuery" name="searchQuery" required>
                    <button type="submit">Search</button>
                </form>
                <table style="display:none; margin-top: 20px; width: 100%; border-collapse: collapse;">
                    <thead>
                        <tr>
                            <th>Item Name</th>
                            <th>Seller</th>
                            <th>Available Items</th>
                            <th>Rating</th>
                            <th>Reviews</th>
                            <th>Price</th>
                            <th>Description</th>
                            <th>Image</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Search results will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Rating Modal -->
        <div id="ratingModal" class="modal">
            <div class="modal-content">
                <span id="closeRatingModal" class="close">&times;</span>
                <h2>Rate Your Product</h2>
                <form id="ratingForm">
                    <label>Rate the product:</label><br>
                    <div style="display: flex; gap: 10px; margin: 10px 0; align-items: center;">
                        <label><input type="radio" id="rate1" name="rating" value="1" required> 1</label>
                        <label><input type="radio" id="rate2" name="rating" value="2"> 2</label>
                        <label><input type="radio" id="rate3" name="rating" value="3"> 3</label>
                        <label><input type="radio" id="rate4" name="rating" value="4"> 4</label>
                        <label><input type="radio" id="rate5" name="rating" value="5"> 5</label>
                    </div>
                    <button type="submit" class="button submit-button">Submit Rating</button>
                </form>
            </div>
        </div>
    </div>
</body>
</html>
